name: 'github-release-github-action'
description: 'This action adds a new GitHub Release.'

inputs:
  GITHUB_TOKEN:
    description: >
      Specify the caller's `github.token`.
    required: true
  version:
    description: >
      Specify the version to be released.

      ex) `1.0.0`, `0.1.0`
    required: false
  target-branch:
    description: >
      Specify the target branch.

      ex) `main`, `develop`, `release`
    required: false
  disable-short-version:
    description: >
      Enable short version.
      If this parameter is enabled, only the first number of the version number is not used in the tag.
      A combat-numbers-only tag for the version number means, for example, that if the version number is `1.0.0`, the tag will be `v1`.

      ex) `true`
    required: false

branding:
  icon: 'box'
  color: 'orange'

runs:
  using: "composite"
  steps:
    - name: 🍏 Set up Node.js version
      uses: actions/setup-node@v4

    - name: 📦 Get version
      shell: bash
      run: |
        if [ -n "${{ inputs.version }}" ]; then
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
        else
          echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
        fi

    - name: 🚀 GitHub Release
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      run: |
        if [ -n "${{ inputs.target-branch }}" ]; then
          TARGET_BRANCH=${{ inputs.target-branch }}
        else
          TARGET_BRANCH="main"
        fi

        gh release create v$VERSION --generate-notes --target $TARGET_BRANCH

        echo "Tag version: $VERSION"

        if [ "${{ inputs.disable-short-version }}" == "true" ]; then
          # Exit early if disable-short-version is true to avoid creating a short version tag
          exit 0
        fi

        MAJOR_VERSION=$(echo "$VERSION" | grep -oE "^[0-9]+")
        TAG="v$MAJOR_VERSION"

        if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Overwriting..."
            git tag -d "$TAG"
            git push origin ":refs/tags/$TAG"
        fi

        git tag "$TAG" "$TARGET_BRANCH"
        git push --force origin "$TAG"

        echo "Tag $TAG has been created and pushed successfully."
